// Generated by CoffeeScript 1.10.0
define(['can/control', 'can/view/mustache', 'base', 'Auth', 'reqwest', 'pdfjs-dist/build/pdf', 'videojs', '_', 'datatables.net', 'datatables.net-bs', 'datatables.net-responsive', 'datatables.net-responsive-bs', 'select2cn', 'datepickercn', 'es6shim'], function(Control, can, base, Auth, reqwest, pdfDist, videojs) {
  var PDFJS, pageData;
  pageData = new can.Map();
  PDFJS = pdfDist.PDFJS;
  return Control.extend({
    init: function(el, pdata) {
      var DEFAULT_SCALE, renderPdf, table, videoPlayer;
      pageData.attr('userIsOnSite', Auth.userIsOnSite());
      pageData.attr('userIsContract', Auth.userIsContract());
      this.element.html(can.view("../public/view/home/dashboard/otherDashboard.html", pageData));
      $('.input-group.date input').datepicker({
        language: 'zh-CN',
        todayBtn: true,
        autoclose: true
      });
      $('#category').select2({
        language: 'zh-CN',
        theme: "bootstrap",
        placeholder: '请选择'
      });
      $('#category').change(function() {
        var $group;
        if ($(this).val() === 'rule') {
          $('#docType').closest('.form-group').addClass('hide');
          $('#docProperty').closest('.form-group').addClass('hide');
          $group = $('#function').closest('.form-group');
          $group.removeClass('hide');
          if (!$group.data('done')) {
            reqwest(Auth.apiHost + "dict/functions?_=" + (Date.now())).then(function(data) {
              var functions;
              functions = _.map(data, function(e) {
                return {
                  id: e.text,
                  text: e.text
                };
              });
              return $('#function').select2({
                language: 'zh-CN',
                theme: "bootstrap",
                placeholder: '请选择',
                data: functions
              });
            }).fail(function(err) {
              return bootbox.alert('获取发布职能失败！');
            });
            return $group.data('done', true);
          }
        } else if ($(this).val() === 'doc') {
          $('#function').closest('.form-group').addClass('hide');
          $group = $('#docType').closest('.form-group');
          $group.removeClass('hide');
          if (!$group.data('done')) {
            reqwest(Auth.apiHost + "dict/docTypes?_=" + (Date.now())).then(function(data) {
              var types;
              types = _.map(data, function(e) {
                return {
                  id: e.text,
                  text: e.text
                };
              });
              return $('#docType').select2({
                language: 'zh-CN',
                theme: "bootstrap",
                placeholder: '请选择',
                data: types
              });
            }).fail(function(err) {
              return bootbox.alert('获取文档类型失败！');
            });
            $group.data('done', true);
          }
          $group = $('#docProperty').closest('.form-group');
          $group.removeClass('hide');
          if (!$group.data('done')) {
            $('#docProperty').select2({
              language: 'zh-CN',
              theme: "bootstrap",
              placeholder: '请选择'
            });
            return $group.data('done', true);
          }
        }
      });
      table = $('#otherList').DataTable({
        paging: true,
        bFilter: false,
        processing: true,
        serverSide: true,
        ordering: false,
        "order": [],
        ajax: {
          url: Auth.apiHost + "doc/other/page?_=" + (Date.now()),
          data: function(d) {
            var k, search, v;
            search = $('#searchForm').serializeObject();
            for (k in search) {
              v = search[k];
              if (!v) {
                delete search[k];
              }
            }
            _.extend(d, search);
            d.dateBegin = $('#dateBegin').datepicker('getDate') || void 0;
            d.dateEnd = $('#dateEnd').datepicker('getDate') || void 0;
            return d;
          }
        },
        columns: [
          {
            data: 'category',
            render: function(data) {
              if (data === 'rule') {
                return '细则';
              } else {
                return '文档';
              }
            }
          }, {
            data: 'function'
          }, {
            data: 'docType'
          }, {
            data: 'docProperty'
          }, {
            data: 'content'
          }, {
            data: 'importance'
          }, {
            data: 'creator'
          }, {
            data: 'date',
            render: function(data) {
              if (data) {
                return new Date(data).toLocaleDateString();
              } else {
                return '';
              }
            }
          }, {
            data: 'id',
            responsivePriority: 2,
            render: function(data, d, row) {
              var $btn;
              $btn = $("<a href='#!home/administration/" + row.category + "/" + data + "' class='btn btn-danger btn-xs' type='button'/>").text('详情');
              return $btn[0].outerHTML;
            }
          }, {
            data: 'file',
            responsivePriority: 2,
            render: function(data, d, row) {
              var $href;
              if (data) {
                if (data.filename.endsWith('.pdf')) {
                  $href = $("<a href='#' data-src='" + Auth.apiHost + "doc/file/" + data.id + "/" + (encodeURIComponent(data.filename)) + "' data-toggle='modal' data-target='#largeModal'/>").text("" + data.filename);
                } else if (/\.avi|\.rmvb|\.rm|\.asf|\.divx|\.mpg|\.mpeg|\.wmv|\.mp4|\.mkv/.test(data.filename)) {
                  $href = $("<a href='#' data-src='" + Auth.apiHost + "doc/video/" + data.id + "/" + (encodeURIComponent(data.filename)) + "' data-downloadurl='" + Auth.apiHost + "doc/file/" + data.id + "/" + (encodeURIComponent(data.filename)) + "' data-toggle='modal' data-target='#normalModal'/>").text("" + data.filename);
                } else {
                  $href = $("<a href='" + Auth.apiHost + "doc/file/" + data.id + "/" + (encodeURIComponent(data.filename)) + "'/>").text("" + data.filename);
                }
                return $href[0].outerHTML;
              }
            }
          }
        ]
      });
      $('#searchForm button').unbind('click').bind('click', function(e) {
        return table.ajax.reload();
      });
      DEFAULT_SCALE = 1.5;
      renderPdf = function(pdf, svgLib, modalBody) {
        var i, modalFooter, promise, results, sumPages;
        modalFooter = $(modalBody).next('.modal-footer');
        $('.incomplete-warn', modalFooter).addClass('hide');
        promise = $.Deferred().resolve();
        sumPages = pdf.numPages;
        if (sumPages > 20) {
          sumPages = 20;
          $('.incomplete-warn', modalFooter).removeClass('hide');
          $('.pages-number', modalFooter).text(pdf.numPages);
        }
        return _.each((function() {
          results = [];
          for (var i = 1; 1 <= sumPages ? i <= sumPages : i >= sumPages; 1 <= sumPages ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this), function(e) {
          return promise = promise.then((function(pageNum) {
            return pdf.getPage(pageNum).then(function(page) {
              var container, viewport;
              viewport = page.getViewport(DEFAULT_SCALE);
              container = document.createElement('div');
              container.id = 'pageContainer' + pageNum;
              container.className = 'pageContainer';
              container.style.width = viewport.width + 'px';
              container.style.height = viewport.height + 'px';
              modalBody.appendChild(container);
              return page.getOperatorList().then(function(opList) {
                var svgGfx;
                svgGfx = new svgLib.SVGGraphics(page.commonObjs, page.objs);
                return svgGfx.getSVG(opList, viewport).then(function(svg) {
                  return container.appendChild(svg);
                });
              });
            });
          }).bind(null, e));
        });
      };
      videoPlayer = videojs($('video', $('#normalModal'))[0], {});
      $('.modal').on('show.bs.modal', function(event) {
        var $ahref, modal, url;
        $ahref = $(event.relatedTarget);
        url = $ahref.data('src');
        if (url !== $('.download-btn', modal).attr('href')) {
          $('#largeModal .pageContainer').remove();
          modal = $($ahref.data('target'));
          $('.modal-title', modal).text($ahref.text());
          $('.download-btn', modal).attr('href', $ahref.data('downloadurl') || url);
          if ($ahref.text().endsWith('.pdf')) {
            return PDFJS.getDocument(url).then(function(doc) {
              return renderPdf(doc, PDFJS, $('.modal-body', modal)[0]);
            });
          } else {
            if (url !== videoPlayer.currentSrc()) {
              return videoPlayer.src(url);
            }
          }
        }
      });
      $('#normalModal').on('shown.bs.modal', function(event) {
        var modalBodyWidth;
        modalBodyWidth = $('#normalModal .modal-body').width();
        videoPlayer.dimensions(modalBodyWidth, modalBodyWidth / 640 * 360);
        return videoPlayer.play();
      });
      return $('#normalModal').on('hide.bs.modal', function(event) {
        return videoPlayer.pause();
      });
    }
  });
});
